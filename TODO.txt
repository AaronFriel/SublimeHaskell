TODO
====

* Write README file describing prerequisites and features
* Check that external binaries exist (cabal, ghc, HLint, ...) before trying to run them
* Add "go to definition" (alt-click)
* Add "find all references"
* Add HLint support

Error checking
--------------
* Add a syntax definition for the error panel format, so that error messages are highlighted
* Highlight errors and warnings in the view showing that file instead of all in the current view
* Run "cabal configure" when necessary
* Highlight partial, "bottom"-valued, and unsafe functions: head, undefined, error, etc.
* Trim highlighting to exclude leading and trailing whitespace on lines

Autocomplete
------------
* Get export list of each module:
  * Either read explicit export list, or, if implicit, include all the declarations
* Get all the modules imported into the current file
* Somehow include Prelude and library functions
  * Hard-coded? (.sublime-completions file)
* Feature request: multiline tooltip next to the autocomplete list that shows details of the selected completion
  * List type (a -> b, data, newtype, class, ...) for each suggestion
  * Details: namespace, type, ...
* Inspect modules asynchronously
* Automatically inspect Haskell source files when they are opened

Syntax highlighting
-------------------
* Submit the patch for (H/H.tmLanguage.orig -> Haskell/Haskell.tmLanguage)
* Most of the types in type signatures (except the first one) are incorrectly classified as "storage.type" -- should be something like "user-defined class"
* "Just" and "Nothing" are classified as "support.constant" -- should probably be either "support.type" or "support.class"
* It would be nice to draw modules names (in fully-qualified names) in a light gray color to be less distracting
  * At a minimum, they should not be colored like types and constructors
* User-defined operators should not be keyword-colored, they should be colored like other user-defined functions
* Add theme rules for XML scopes (compare with Monokai's supported scopes)
